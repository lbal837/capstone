// Mocks generated by Mockito 5.4.0 from annotations
// in frontend/test/home_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:amazon_cognito_identity_dart_2/cognito.dart' as _i5;
import 'package:frontend/auth/user_service.dart' as _i4;
import 'package:frontend/data/patient_repository.dart' as _i7;
import 'package:frontend/domain/patient.dart' as _i3;
import 'package:frontend/domain/user.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatient_1 extends _i1.SmartFake implements _i3.Patient {
  _FakePatient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i4.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set credentials(_i5.CognitoCredentials? _credentials) => super.noSuchMethod(
        Invocation.setter(
          #credentials,
          _credentials,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<bool> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.User?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i6.Future<_i2.User?>.value(),
      ) as _i6.Future<_i2.User?>);
  @override
  _i6.Future<_i5.CognitoCredentials?> getCredentials() => (super.noSuchMethod(
        Invocation.method(
          #getCredentials,
          [],
        ),
        returnValue: _i6.Future<_i5.CognitoCredentials?>.value(),
      ) as _i6.Future<_i5.CognitoCredentials?>);
  @override
  _i6.Future<_i2.User?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i2.User?>.value(),
      ) as _i6.Future<_i2.User?>);
  @override
  _i6.Future<bool> confirmAccount(
    String? email,
    String? confirmationCode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmAccount,
          [
            email,
            confirmationCode,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<void> resendConfirmationCode(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resendConfirmationCode,
          [email],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<bool> checkAuthenticated() => (super.noSuchMethod(
        Invocation.method(
          #checkAuthenticated,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.User> signUp(
    String? email,
    String? password,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            name,
          ],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #signUp,
            [
              email,
              password,
              name,
            ],
          ),
        )),
      ) as _i6.Future<_i2.User>);
  @override
  _i6.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [PatientRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatientRepository extends _i1.Mock implements _i7.PatientRepository {
  MockPatientRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Patient> fetchPatient(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchPatient,
          [id],
        ),
        returnValue: _i6.Future<_i3.Patient>.value(_FakePatient_1(
          this,
          Invocation.method(
            #fetchPatient,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Patient>);
  @override
  _i6.Future<List<_i3.Patient>> fetchAllPatients() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllPatients,
          [],
        ),
        returnValue: _i6.Future<List<_i3.Patient>>.value(<_i3.Patient>[]),
      ) as _i6.Future<List<_i3.Patient>>);
}
